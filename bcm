#!/bin/bash

set -Eeuo pipefail
cd "$(dirname "$0")"

BCM_HELP_FLAG=0

for i in "$@"; do
    case $i in
        --help)
            BCM_HELP_FLAG=1
        ;;
        *)
            # unknown option
        ;;
    esac
done

export BCM_HELP_FLAG="$BCM_HELP_FLAG"

if [[ ! -z ${1+x} ]]; then
    BCM_CLI_COMMAND="$1"
else
    cat ./commands/help.txt
    exit
fi

export BCM_PROJECT_DIR="$BCM_GIT_DIR/project"
export BCM_LXD_OPS="$BCM_PROJECT_DIR/shared"
export BCM_STACKS_DIR="$BCM_GIT_DIR/stacks"

# see README.md for versioning scheme.

# major version change requires reinstallation & disaster recovery of data
export BCM_MAJOR_VERSION="0"

# minor version requires update to LXC system containers
export BCM_MINOR_VERSION="0"

# Represents update on one or more docker (app images)
export BCM_PATCH_VERSION="3"

export BCM_VERSION="v$BCM_MAJOR_VERSION.$BCM_MINOR_VERSION.$BCM_PATCH_VERSION"
export BCM_DOCKER_BASE_TAG="18.04"
export BCM_RUNTIME_DIR="$HOME/.bcm"
export BCM_DATACENTER="default"
export BCM_PROJECT="bcm-$BCM_DATACENTER""_""$BCM_VERSION"
BCM_ACTIVE_CHAIN="testnet"


BCM_CONFIG_FILE="$HOME/.bcmconfig"
if [[ ! -f $BCM_CONFIG_FILE ]]; then
    touch "$BCM_CONFIG_FILE"
    chmod 0755 "$BCM_CONFIG_FILE"
    {
        echo "#!/bin/bash"
        echo "export BCM_DEBUG=0"
    } >> "$BCM_CONFIG_FILE"
fi

export BCM_CONFIG_FILE="$BCM_CONFIG_FILE"

# the options in this file override any CLI options, such as which chahin
# to target, where our files are located, whether we're in debug mode, etc.
source "$BCM_CONFIG_FILE"

export BCM_ACTIVE_CHAIN="$BCM_ACTIVE_CHAIN"
export BCM_SSH_DIR="$BCM_RUNTIME_DIR/.ssh"

export ELECTRUM_DIR="$BCM_RUNTIME_DIR/.electrum"
export ELECTRUM_ENC_DIR="$BCM_RUNTIME_DIR/.electrum_enc"

export BCM_WORKING_DIR="$BCM_RUNTIME_DIR/clusters"
export BCM_WORKING_ENC_DIR="$BCM_RUNTIME_DIR/.clusters_enc"

GNUPGHOME="$BCM_RUNTIME_DIR/.gnupg"
PASSWORD_STORE_DIR="$BCM_RUNTIME_DIR/.password_store"


export GNUPGHOME="$GNUPGHOME"
export PASSWORD_STORE_DIR="$PASSWORD_STORE_DIR"
export ELECTRUM_DIR="$ELECTRUM_DIR"
export LXC_BCM_BASE_IMAGE_NAME="bcm-template"

BCM_MANAGER_HOST_NAME="bcm-manager-01"
BCM_KAFKA_HOST_NAME="bcm-kafka-01"
BCM_UNDERLAY_HOST_NAME="bcm-underlay-01"
BCM_BITCOIN_HOST_NAME="bcm-bitcoin$BCM_ACTIVE_CHAIN-01"

export BCM_MANAGER_HOST_NAME="$BCM_MANAGER_HOST_NAME"
export BCM_KAFKA_HOST_NAME="$BCM_KAFKA_HOST_NAME"
export BCM_UNDERLAY_HOST_NAME="$BCM_UNDERLAY_HOST_NAME"
export BCM_BITCOIN_HOST_NAME="$BCM_BITCOIN_HOST_NAME"

export BCM_PRIVATE_REGISTRY="$BCM_MANAGER_HOST_NAME:5010"
export BCM_KNOWN_HOSTS_FILE="$BCM_SSH_DIR/known_hosts"

export BCM_DOCKER_IMAGE_CACHE_FQDN="registry-1.docker.io"
export BCM_LXD_IMAGE_CACHE="images.linuxcontainers.org"

if [[ "$BCM_CLI_COMMAND" == "reset" ]]; then
    ./commands/reset.sh "$@"
    exit
fi

# ensure the lxc and docker clients are installed.
bash -c "$BCM_GIT_DIR/controller/install_lxc_client.sh"

bash -c "$BCM_GIT_DIR/controller/install_docker_client.sh"

# let's make sure the local git client is using TOR for git pull operations.
# this should have been configured on a global level already when the user initially
# downloaded BCM from github
BCM_TOR_PROXY="socks5://localhost:9050"
if [[ $(git config --get --local http.proxy) != "$BCM_TOR_PROXY" ]]; then
    echo "Setting git client to use local SOCKS5 TOR proxy for push/pull operations."
    git config --local http.proxy "$BCM_TOR_PROXY"
fi

# call the CLI entrypoint.
./commands/cli_entrypoint.sh "$@"
