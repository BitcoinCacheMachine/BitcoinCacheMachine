#!/bin/bash

set -Eeuo pipefail
cd "$(dirname "$0")"

export BCM_GIT_DIR="$(pwd)"
export BCM_LXD_OPS="$BCM_GIT_DIR/project/shared"
export BCM_MAJOR_VERSION="0"
export BCM_MINOR_VERSION="0"
export BCM_PATCH_VERSION="1"
export BCM_VERSION="v$BCM_MAJOR_VERSION.$BCM_MINOR_VERSION.$BCM_PATCH_VERSION"
export BCM_DOCKER_BASE_TAG="18.10"
export BCM_RUNTIME_DIR="$HOME/.bcm" && mkdir -p "$BCM_RUNTIME_DIR"
BCM_HELP_FLAG=0
export BCM_DATACENTER="default"
export BCM_PROJECT="bcm-$BCM_DATACENTER""_""$BCM_VERSION"
export BCM_CONFIG_FILE="$HOME/.bcmconfig"

for i in "$@"; do
    case $i in
        --help)
            BCM_HELP_FLAG=1
        ;;
        *)
            # unknown option
        ;;
    esac
done

export BCM_HELP_FLAG="$BCM_HELP_FLAG"

if [[ ! -f $BCM_CONFIG_FILE ]]; then
    touch "$BCM_CONFIG_FILE"
    chmod 0755 "$BCM_CONFIG_FILE"
    {
        echo "#!/bin/bash"
        echo "export BCM_DEBUG=0"
        echo "export BCM_LOGGING=lxd"
    } >>"$BCM_CONFIG_FILE"
fi

# commands in ~/.bashrc are delimited by these literals.
BASHRC_FILE="$HOME/.bashrc"
if [[ ! -f $BASHRC_FILE ]]; then
    touch "$BASHRC_FILE"
    sudo chmod 0644 "$BASHRC_FILE"
fi

BASHRC_TEXT="export PATH=$""PATH:""$(pwd)"
source "$BASHRC_FILE"
if ! grep -qF "$BASHRC_TEXT" "$BASHRC_FILE"; then
    echo "$BASHRC_TEXT" >>"$BASHRC_FILE"
fi

# the options in this file override any CLI options, such as which chahin
# to target, where our files are located, whether we're in debug mode, etc.
source "$BCM_CONFIG_FILE"

export BCM_ACTIVE_CHAIN="testnet"
export BCM_SSH_DIR="$HOME/.ssh" && mkdir -p "$BCM_SSH_DIR"

export ELECTRUM_DIR="$BCM_RUNTIME_DIR/electrum" && mkdir -p "$ELECTRUM_DIR"
export BCM_CLUSTERS_DIR="$BCM_RUNTIME_DIR/clusters" && mkdir -p "$BCM_CLUSTERS_DIR"
export BCM_STACKS_DIR="$BCM_GIT_DIR/stacks"

GNUPGHOME="$HOME/.gnupg"
PASSWORD_STORE_DIR="$HOME/.password_store" && mkdir -p "$PASSWORD_STORE_DIR"

export GNUPGHOME="$GNUPGHOME"
export PASSWORD_STORE_DIR="$PASSWORD_STORE_DIR"
export ELECTRUM_DIR="$ELECTRUM_DIR"
export LXC_BCM_BASE_IMAGE_NAME="bcm-template"

BCM_MANAGER_HOST_NAME="bcm-manager-01"
BCM_KAFKA_HOST_NAME="bcm-kafka-01"
BCM_UNDERLAY_HOST_NAME="bcm-underlay-01"
BCM_BITCOIN_HOST_NAME="bcm-bitcoin$BCM_ACTIVE_CHAIN-01"

export BCM_MANAGER_HOST_NAME="$BCM_MANAGER_HOST_NAME"
export BCM_KAFKA_HOST_NAME="$BCM_KAFKA_HOST_NAME"
export BCM_UNDERLAY_HOST_NAME="$BCM_UNDERLAY_HOST_NAME"
export BCM_BITCOIN_HOST_NAME="$BCM_BITCOIN_HOST_NAME"

export BCM_PRIVATE_REGISTRY="$BCM_MANAGER_HOST_NAME:5010"
export BCM_KNOWN_HOSTS_FILE="$BCM_SSH_DIR/known_hosts"

export BCM_DOCKER_IMAGE_CACHE_FQDN="registry-1.docker.io"
export BCM_LXD_IMAGE_CACHE="images.linuxcontainers.org"

# ensure the lxc and docker clients are installed.
bash -c "$BCM_GIT_DIR/controller/install_lxc_client.sh"

bash -c "$BCM_GIT_DIR/controller/install_docker_client.sh"

# let's make sure the local git client is using TOR for git pull operations.
# this should have been configured on a global level already when the user initially
# downloaded BCM from github
BCM_TOR_PROXY="socks5://localhost:9050"
if [[ $(git config --get --local http.proxy) != "$BCM_TOR_PROXY" ]]; then
    echo "Setting git client to use local SOCKS5 TOR proxy for push/pull operations."
    git config --local http.proxy "$BCM_TOR_PROXY"
fi

# this section configured the local SSH client on the Controller
# so it uses the local SOCKS5 proxy for any SSH host that has a
# ".onion" address. We use SSH tunneling to expose the remote onion
# server's LXD API and access it on the controller via a locally
# expose port (after SSH tunneling)
SSH_LOCAL_CONF="$HOME/.ssh/config"
if [[ ! -f "$SSH_LOCAL_CONF" ]]; then
    # if the .ssh/config file doesn't exist, create it.
    mkdir -p "$HOME/.ssh"
    touch "$SSH_LOCAL_CONF"
fi

# Next, paste in the necessary .ssh/config settings for accessing
# remote LXD servers over TOR hidden services.
if [[ -f "$SSH_LOCAL_CONF" ]]; then
    SSH_ONION_TEXT="Host *.onion"
    if ! grep -Fxq "$SSH_ONION_TEXT" "$SSH_LOCAL_CONF"; then
        {
            echo "$SSH_ONION_TEXT"
            echo "    ProxyCommand nc -xlocalhost:9050 -X5 %h %p"
        } >>"$SSH_LOCAL_CONF"
    fi
fi

# call the CLI entrypoint.
./commands/cli_entrypoint.sh "$@"
