#!/bin/bash

# note the absense of -u allows you to use environment variables from the parent shell
set -Eeo pipefail
cd "$(dirname "$0")"

export BCM_GIT_DIR="$(pwd)"
export BCM_LXD_OPS="$BCM_GIT_DIR/project/shared"
export BCM_MAJOR_VERSION="0"
export BCM_MINOR_VERSION="0"
export BCM_PATCH_VERSION="1"
export BCM_VERSION="v$BCM_MAJOR_VERSION.$BCM_MINOR_VERSION.$BCM_PATCH_VERSION"
export BCM_DOCKER_BASE_TAG="18.10"

# todo; convert this to a temp encrypted ramdisk that exists for the duration of each bcm call.
BCM_HELP_FLAG=0
export BCM_DATACENTER="default"
export BCM_PROJECT="bcm-$BCM_DATACENTER""_""$BCM_VERSION"

# if this is 1, then we assume we are running BCM WITHOUT the front-end (e.g., dockerd on bare metal)
IS_FRONTEND=1

for i in "$@"; do
    case $i in
        --help)
            BCM_HELP_FLAG=1
        ;;
        --backend-only)
            IS_FRONTEND=0
        ;;
        *)
            # unknown option
        ;;
    esac
done


BCM_SSH_HOSTNAME=${BCM_SSH_HOSTNAME:-"$(hostname)"}
if [[ ! -z $BCM_SSH_HOSTNAME ]]; then
    BCM_SSH_HOSTNAME="$BCM_SSH_HOSTNAME"
fi

BCM_SSH_USERNAME=${BCM_SSH_USERNAME:-"$(whoami)"}
if [[ ! -z $BCM_SSH_USERNAME ]]; then
    BCM_SSH_USERNAME="$BCM_SSH_USERNAME"
fi

export BCM_SSH_HOSTNAME="$BCM_SSH_HOSTNAME"
export BCM_SSH_USERNAME="$BCM_SSH_USERNAME"

export BCM_HELP_FLAG="$BCM_HELP_FLAG"
export IS_FRONTEND="$IS_FRONTEND"

# switch to 'master' for formal versions.
export BCM_DEFAULT_GIT_BRANCH="dev"
export BCM_ACTIVE_CHAIN="testnet"
export BCM_SSH_DIR="$HOME/.ssh" && mkdir -p "$BCM_SSH_DIR"
export BCM_STACKS_DIR="$BCM_GIT_DIR/stacks"
export BCM_DEBUG=1

GNUPGHOME="$HOME/.gnupg"
PASSWORD_STORE_DIR="$HOME/.password_store" && mkdir -p "$PASSWORD_STORE_DIR"

export GNUPGHOME="$GNUPGHOME"
export PASSWORD_STORE_DIR="$PASSWORD_STORE_DIR"
export LXC_BCM_BASE_IMAGE_NAME="bcm-template"

# todo allow environment override.
export BCM_LOGGING_METHOD=lxd

BCM_MANAGER_HOST_NAME="bcm-manager-01"
BCM_KAFKA_HOST_NAME="bcm-kafka-01"
BCM_UNDERLAY_HOST_NAME="bcm-underlay-01"
BCM_BITCOIN_HOST_NAME="bcm-bitcoin$BCM_ACTIVE_CHAIN-01"

export BCM_MANAGER_HOST_NAME="$BCM_MANAGER_HOST_NAME"
export BCM_KAFKA_HOST_NAME="$BCM_KAFKA_HOST_NAME"
export BCM_UNDERLAY_HOST_NAME="$BCM_UNDERLAY_HOST_NAME"
export BCM_BITCOIN_HOST_NAME="$BCM_BITCOIN_HOST_NAME"
export BCM_GITHUB_REPO_URL="https://github.com/BitcoinCacheMachine/BitcoinCacheMachine"
export BCM_PRIVATE_REGISTRY="$BCM_MANAGER_HOST_NAME:5010"
export BCM_KNOWN_HOSTS_FILE="$BCM_SSH_DIR/known_hosts"
export BCM_BACKUP_DIR="$HOME/.bcm_backups" && mkdir -p "$BCM_BACKUP_DIR"

export BCM_DOCKER_IMAGE_CACHE_FQDN="registry-1.docker.io"
export BCM_LXD_IMAGE_CACHE="images.linuxcontainers.org"


# let's make sure the local git client is using TOR for git pull operations.
# this should have been configured on a global level already when the user initially
# downloaded BCM from github
BCM_TOR_PROXY="socks5://127.0.0.1:9050"
if [[ "$(git config --get --local http.$BCM_GITHUB_REPO_URL.proxy)" != "$BCM_TOR_PROXY" ]]; then
    echo "Setting git client to use local SOCKS5 TOR proxy for push/pull operations."
    git config --local "http.$BCM_GITHUB_REPO_URL.proxy" "$BCM_TOR_PROXY"
fi

# this section configured the local SSH client on the Controller
# so it uses the local SOCKS5 proxy for any SSH host that has a
# ".onion" address. We use SSH tunneling to expose the remote onion
# server's LXD API and access it on the controller via a locally
# expose port (after SSH tunneling)
SSH_LOCAL_CONF="$HOME/.ssh/config"
if [[ ! -f "$SSH_LOCAL_CONF" ]]; then
    # if the .ssh/config file doesn't exist, create it.
    mkdir -p "$HOME/.ssh"
    touch "$SSH_LOCAL_CONF"
fi

# Next, paste in the necessary .ssh/config settings for accessing
# remote LXD servers over TOR hidden services. This will make any 'ssh' command
# redirect all .onion hostnames to your localhost:9050 tor SOCKS5 proxy.
if [[ -f "$SSH_LOCAL_CONF" ]]; then
    SSH_ONION_TEXT="Host *.onion"
    if ! grep -Fxq "$SSH_ONION_TEXT" "$SSH_LOCAL_CONF"; then
        echo "Info (IMPORTANT): Updating your /etc/ssh/sshd_config file so it redirects all *.onion names out your local Tor proxy."
        {
            echo "$SSH_ONION_TEXT"
            echo "    ProxyCommand nc -xlocalhost:9050 -X5 %h %p"
        } >>"$SSH_LOCAL_CONF"
    fi
fi

# if there's no group called lxd, create it.
if ! groups "$(whoami)" | grep -q lxd; then
    sudo gpasswd -a "$(whoami)" lxd
fi

# if LXC is not available, install it.
if [[ ! -f "$(command -v lxc)" ]]; then
    # install lxd via snap
    # unless this is modified, we get snapshot creation in snap when removing lxd.
    echo "Info: installing 'lxd' on $HOSTNAME."
    sudo snap install lxd --channel="3.17/candidate"
    sudo snap set system snapshots.automatic.retention=no
    sleep 5
fi


# if the current cluster is not configured, let's bring it into existence.
if lxc info | grep -q "server_clustered: false"; then
    bash -c "./commands/cluster/entrypoint.sh cluster create"
    exit
fi

# Install docker if we're running this command on a front-end
if [[ $IS_FRONTEND = 1 ]]; then
    #bash -c "$BCM_GIT_DIR/commands/controller/install_docker_client.sh"
    
    ./commands/cli_entrypoint.sh "$@"
fi
